// –§—É–Ω–∫—Ü–∏—è —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —á–∏—Å–µ–ª
function formatNumber(num) {
    if (typeof num !== 'number' || isNaN(num)) {
        return '0';
    }
    return num.toString();
}

// –í –Ω–∞—á–∞–ª–µ —Ñ–∞–π–ª–∞ –¥–æ–±–∞–≤–∏–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –¥–ª—è Telegram WebApp
const tg = window.Telegram.WebApp;

// –§—É–Ω–∫—Ü–∏—è –ø–æ–∫–∞–∑–∞ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π
function showNotification(message) {
    const notification = document.querySelector('.notification');
    
    if (window.notificationTimeout) {
        clearTimeout(window.notificationTimeout);
    }
    
    const isError = message.toLowerCase().includes('–Ω–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ');
    notification.style.background = isError ? 'rgba(255, 51, 102, 0.95)' : 'rgba(40, 167, 69, 0.95)';
    notification.textContent = message;
    notification.classList.add('show');
    
    window.notificationTimeout = setTimeout(() => {
        notification.classList.remove('show');
        setTimeout(() => {
            notification.style.visibility = 'hidden';
        }, 300);
    }, 3000);
}

// –ú–∞—Å—Å–∏–≤ –∑–∞–¥–∞–Ω–∏–π
const tasks = [
    {
        id: 4,
        title: "–ü–µ—Ä–≤—ã–µ —à–∞–≥–∏",
        description: "–°–¥–µ–ª–∞–π—Ç–µ —Å–≤–æ–π –ø–µ—Ä–≤—ã–π –∫–ª–∏–∫",
        icon: "üéØ",
        reward: 100,
        completed: false,
        claimed: false
    },
    {
        id: 5,
        title: "–ù–∞—á–∏–Ω–∞—é—â–∏–π –∫–ª–∏–∫–µ—Ä",
        description: "–ù–∞–±–µ—Ä–∏—Ç–µ 1,000 –∫–ª–∏–∫–æ–≤",
        icon: "‚≠ê",
        reward: 1000,
        completed: false,
        claimed: false
    },
    {
        id: 6,
        title: "–û–ø—ã—Ç–Ω—ã–π –∫–ª–∏–∫–µ—Ä",
        description: "–ù–∞–±–µ—Ä–∏—Ç–µ 10,000 –∫–ª–∏–∫–æ–≤",
        icon: "üåü",
        reward: 10000,
        completed: false,
        claimed: false
    },
    {
        id: 7,
        title: "–ú–∞—Å—Ç–µ—Ä –∫–ª–∏–∫–µ—Ä",
        description: "–ù–∞–±–µ—Ä–∏—Ç–µ 100,000 –∫–ª–∏–∫–æ–≤",
        icon: "üí´",
        reward: 100000,
        completed: false,
        claimed: false
    },
    {
        id: 8,
        title: "–ö–æ—Ä–æ–ª—å –∫–ª–∏–∫–æ–≤",
        description: "–ù–∞–±–µ—Ä–∏—Ç–µ 1,000,000 –∫–ª–∏–∫–æ–≤",
        icon: "üëë",
        reward: 1000000,
        completed: false,
        claimed: false
    },
    {
        id: 9,
        title: "–ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞",
        description: "–ö—É–ø–∏—Ç–µ –ª—é–±–æ–π –ø—Ä–µ–¥–º–µ—Ç –≤ –º–∞–≥–∞–∑–∏–Ω–µ",
        icon: "üõçÔ∏è",
        reward: 5000,
        completed: false,
        claimed: false
    },
    {
        id: 10,
        title: "–®–æ–ø–æ–≥–æ–ª–∏–∫",
        description: "–ö—É–ø–∏—Ç–µ 5 —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
        icon: "üõí",
        reward: 50000,
        completed: false,
        claimed: false
    },
    {
        id: 11,
        title: "–ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä",
        description: "–ö—É–ø–∏—Ç–µ 10 —Ä–∞–∑–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤",
        icon: "üíé",
        reward: 500000,
        completed: false,
        claimed: false
    },
    {
        id: 12,
        title: "–≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π —Å—Ç–∞—Ä—Ç",
        description: "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10 –∫–ª–∏–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É",
        icon: "‚ö°",
        reward: 10000,
        completed: false,
        claimed: false
    },
    {
        id: 13,
        title: "–°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∫–ª–∏–∫–µ—Ä",
        description: "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 100 –∫–ª–∏–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É",
        icon: "üöÄ",
        reward: 100000,
        completed: false,
        claimed: false
    },
    {
        id: 14,
        title: "–ó–≤–µ–∑–¥–Ω—ã–π –ø—É—Ç—å",
        description: "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 1,000 –∫–ª–∏–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É",
        icon: "‚ú®",
        reward: 1000000,
        completed: false,
        claimed: false
    },
    {
        id: 15,
        title: "–ú–∏—Ä–æ–≤–æ–µ –≥–æ—Å–ø–æ–¥—Å—Ç–≤–æ",
        description: "–î–æ—Å—Ç–∏–≥–Ω–∏—Ç–µ 10,000 –∫–ª–∏–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É",
        icon: "üåç",
        reward: 10000000,
        completed: false,
        claimed: false
    },
    {
        id: 21,
        title: "–¢–æ—á–Ω–æ—Å—Ç—å",
        description: "–°–¥–µ–ª–∞–π—Ç–µ 100 –∫–ª–∏–∫–æ–≤ –ø–æ–¥—Ä—è–¥",
        icon: "üéØ",
        reward: 10000,
        completed: false,
        claimed: false
    },
    {
        id: 22,
        title: "–¶–∏—Ä–∫–æ–≤–æ–π –∞—Ä—Ç–∏—Å—Ç",
        description: "–°–¥–µ–ª–∞–π—Ç–µ 1000 –∫–ª–∏–∫–æ–≤ –ø–æ–¥—Ä—è–¥",
        icon: "üé™",
        reward: 100000,
        completed: false,
        claimed: false
    },
    {
        id: 23,
        icon: `<img src="https://i.postimg.cc/s2x2nkmw/image.png" alt="Telegram">`,
        title: '–ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram –∫–∞–Ω–∞–ª',
        description: '–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –Ω–∞—à Telegram –∫–∞–Ω–∞–ª –∏ –ø–æ–ª—É—á–∏—Ç–µ 100,000 –º–æ–Ω–µ—Ç!',
        reward: 100000,
        type: 'telegram_subscription',
        channel: 'fjjddu',
        buttonText: '–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–æ–¥–ø–∏—Å–∫—É',
        completed: false
    }
];

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
let score = 0;
let autoClickPower = 0;
let totalClicks = 0;
let clicksPerSecond = 0;
let clicksPerHour = 0;
let currentStreak = 0;
let maxBalance = 0;
let totalEarned = 0;
let lastUpdateTime = Date.now();
let lastSaveTime = Date.now();
let gameStartTime = Date.now();
let lastClickTime = Date.now();
let canClick = true;
let clickTimes = [];
let vibrationEnabled = true;

// –ò—Å–ø–æ–ª—å–∑—É–µ–º gameSettings –∏–∑ gameSettings.js
if (!window.gameSettings) {
    window.gameSettings = {
        autoIncomeInterval: 1,
        clickPower: 1,
        autoClickMultiplier: 1,
        saveInterval: 1
    };
}

// DOM —ç–ª–µ–º–µ–Ω—Ç—ã
const sectionContents = document.querySelectorAll('.section-content');
const scoreElement = document.querySelector('.score');

// –û–±—ä–µ–∫—Ç –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤
const itemTimers = {};

// –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ö—Ä–∞–Ω–∏–ª–∏—â–∞
const STORAGE_KEYS = {
    TIMERS: 'gameTimers',
    LAST_UPDATE: 'lastTimerUpdate'
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤
function saveTimersState() {
    try {
        const timerState = {};
        Object.keys(itemTimers).forEach(itemId => {
            if (itemTimers[itemId]) {
                timerState[itemId] = {
                    endTime: itemTimers[itemId].endTime,
                    upgradeCount: itemTimers[itemId].upgradeCount,
                    price: itemTimers[itemId].price,
                    startTime: Date.now()
                };
            }
        });
        
        localStorage.setItem(STORAGE_KEYS.TIMERS, JSON.stringify(timerState));
        localStorage.setItem(STORAGE_KEYS.LAST_UPDATE, Date.now().toString());
    } catch (error) {
        console.error('Error saving timers:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Ç–∞–π–º–µ—Ä–æ–≤
function loadTimersState() {
    try {
        const savedTimers = localStorage.getItem(STORAGE_KEYS.TIMERS);
        if (!savedTimers) return;

        const timerState = JSON.parse(savedTimers);
        const now = Date.now();

        Object.keys(timerState).forEach(itemId => {
            const timer = timerState[itemId];
            if (timer && timer.endTime > now) {
                startTimer(parseInt(itemId), timer.endTime, timer.upgradeCount);
            } else if (timer) {
                // –ï—Å–ª–∏ —Ç–∞–π–º–µ—Ä –∏—Å—Ç–µ–∫, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ü–µ–Ω—É
                const buyButton = document.querySelector(`#item-${itemId} .buy-button`);
                if (buyButton) {
                    const formattedPrice = formatNumber(timer.price);
                    buyButton.innerHTML = formattedPrice;
                    buyButton.disabled = false;
                }
            }
        });
    } catch (error) {
        console.error('Error loading timers:', error);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö —Ç–∞–π–º–µ—Ä–æ–≤
function updateAllTimers() {
    const now = Date.now();
    Object.keys(itemTimers).forEach(itemId => {
        const timer = itemTimers[itemId];
        if (!timer) return;

        const timeLeft = timer.endTime - now;
        const buyButton = document.querySelector(`#item-${itemId} .buy-button`);
        
        if (!buyButton) {
            stopTimer(itemId);
            return;
        }

        if (timeLeft <= 0) {
            stopTimer(itemId);
            const formattedPrice = formatNumber(timer.price);
            buyButton.innerHTML = formattedPrice;
            buyButton.disabled = false;
            buyButton.style.opacity = '1';
        } else {
            const minutes = Math.floor(timeLeft / 60000);
            const seconds = Math.floor((timeLeft % 60000) / 1000);
            
            // –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É
            const upgradeIcon = document.createElement('img');
            upgradeIcon.src = 'https://i.postimg.cc/qq4L82vs/image.png';
            upgradeIcon.className = 'upgrade-icon';
            
            buyButton.innerHTML = '';
            buyButton.appendChild(upgradeIcon.cloneNode(true));
            buyButton.appendChild(document.createTextNode(`${minutes}:${seconds.toString().padStart(2, '0')}`));
            buyButton.style.opacity = '0.5';
        }
    });
    
    saveTimersState();
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã —Ç–∞–π–º–µ—Ä–æ–≤
function initializeTimerSystem() {
    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Ç–∞–π–º–µ—Ä—ã
    loadTimersState();
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ —Ç–∞–π–º–µ—Ä–æ–≤
    setInterval(updateAllTimers, 1000);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
    window.addEventListener('beforeunload', saveTimersState);
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–∏ –≤–∫–ª–∞–¥–æ–∫
    document.addEventListener('visibilitychange', () => {
        if (document.hidden) {
            saveTimersState();
        } else {
            loadTimersState();
        }
    });
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', initializeTimerSystem);

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ª–µ–¥—É—é—â–µ–≥–æ –≤—Ä–µ–º–µ–Ω–∏ –∑–∞–¥–µ—Ä–∂–∫–∏
function getNextDelay(upgradeCount) {
    const delays = {
        1: 15,    // 15 —Å–µ–∫—É–Ω–¥
        2: 30,    // 30 —Å–µ–∫—É–Ω–¥
        3: 60,    // 1 –º–∏–Ω—É—Ç–∞
        4: 300,   // 5 –º–∏–Ω—É—Ç
        5: 600,   // 10 –º–∏–Ω—É—Ç
        6: 1800,  // 30 –º–∏–Ω—É—Ç
    };
    return delays[upgradeCount] || 3600; // 60 –º–∏–Ω—É—Ç –¥–ª—è 7+ —É–ª—É—á—à–µ–Ω–∏–π
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ —Ç–∞–π–º–µ—Ä–∞
function stopTimer(itemId) {
    if (itemTimers[itemId] && itemTimers[itemId].interval) {
        clearInterval(itemTimers[itemId].interval);
        delete itemTimers[itemId];
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–ø—É—Å–∫–∞ —Ç–∞–π–º–µ—Ä–∞
function startTimer(itemId, endTime, upgradeCount) {
    const buyButton = document.querySelector(`#item-${itemId} .buy-button`);
    if (!buyButton) return;

    // –ü–æ–ª—É—á–∞–µ–º —Ü–µ–Ω—É –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ—Å–ª–µ —Ç–∞–π–º–µ—Ä–∞
    const itemPrice = shopItems.find(item => item.id === parseInt(itemId))?.price || 0;

    // –û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø—Ä–µ–¥—ã–¥—É—â–∏–π —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞, –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    stopTimer(itemId);

    // –°–æ–∑–¥–∞–µ–º –∏–∫–æ–Ω–∫—É
    const upgradeIcon = document.createElement('img');
    upgradeIcon.src = 'https://i.postimg.cc/qq4L82vs/image.png';
    upgradeIcon.className = 'upgrade-icon';

    itemTimers[itemId] = {
        endTime: endTime,
        upgradeCount: upgradeCount,
        price: itemPrice,
        interval: setInterval(() => {
            const now = Date.now();
            const timeLeft = endTime - now;

            if (timeLeft <= 0) {
                stopTimer(itemId);
                const formattedPrice = formatNumber(itemPrice);
                buyButton.innerHTML = formattedPrice;
                buyButton.disabled = false;
                buyButton.style.opacity = '1';
                buyButton.style.cursor = 'pointer';
                saveTimersState();
                return;
            }

            const minutes = Math.floor(timeLeft / 60000);
            const seconds = Math.floor((timeLeft % 60000) / 1000);
            
            buyButton.innerHTML = '';
            buyButton.appendChild(upgradeIcon.cloneNode(true));
            buyButton.appendChild(document.createTextNode(`${minutes}:${seconds.toString().padStart(2, '0')}`));
            // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É –≤–æ –≤—Ä–µ–º—è —Ç–∞–π–º–µ—Ä–∞
            buyButton.disabled = true;
            buyButton.style.opacity = '0.5';
            buyButton.style.cursor = 'not-allowed';
        }, 1000)
    };

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞—á–∞–ª—å–Ω–æ–µ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    const minutes = Math.floor((endTime - Date.now()) / 60000);
    const seconds = Math.floor(((endTime - Date.now()) % 60000) / 1000);
    buyButton.innerHTML = '';
    buyButton.appendChild(upgradeIcon);
    buyButton.appendChild(document.createTextNode(`${minutes}:${seconds.toString().padStart(2, '0')}`));
    // –ë–ª–æ–∫–∏—Ä—É–µ–º –∫–Ω–æ–ø–∫—É —Å—Ä–∞–∑—É –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Ç–∞–π–º–µ—Ä–∞
    buyButton.disabled = true;
    buyButton.style.opacity = '0.5';
    buyButton.style.cursor = 'not-allowed';

    saveTimersState();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –ø–æ–∫—É–ø–∫–∏
function handlePurchase(itemId) {
    const currentTimer = itemTimers[itemId] || { upgradeCount: 0 };
    const nextUpgradeCount = currentTimer.upgradeCount + 1;
    const delay = getNextDelay(nextUpgradeCount) * 1000; // –∫–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥—ã
    const endTime = Date.now() + delay;
    
    startTimer(itemId, endTime, nextUpgradeCount);
    
    const buyButton = document.querySelector(`#item-${itemId} .buy-button`);
    if (buyButton) {
        buyButton.disabled = true;
    }
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –æ—Ñ—Ñ–ª–∞–π–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
function calculateOfflineProgress() {
    const lastTime = localStorage.getItem('lastOnlineTime');
    if (lastTime) {
        const timeDiff = (Date.now() - parseInt(lastTime)) / 1000; // —Ä–∞–∑–Ω–∏—Ü–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        const offlineEarnings = autoClickPower * timeDiff;
        if (offlineEarnings > 0) {
            score += offlineEarnings;
            showNotification(`–ü–æ–∫–∞ –≤–∞—Å –Ω–µ –±—ã–ª–æ, –≤—ã –∑–∞—Ä–∞–±–æ—Ç–∞–ª–∏: ${formatNumber(Math.floor(offlineEarnings))}`);
        }
    }
    localStorage.setItem('lastOnlineTime', Date.now().toString());
}

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–≥—Ä—ã
function saveGameState() {
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    maxBalance = Math.max(score, maxBalance);

    const state = {
        score,
        autoClickPower,
        totalClicks,
        clicksPerHour,
        currentStreak,
        maxBalance,
        totalEarned,
        gameStartTime,
        totalPurchases,
        tasks,
        shopItems: shopItems.map(item => ({
            id: item.id,
            level: item.level,
            price: item.price
        }))
    };
    localStorage.setItem('gameState', JSON.stringify(state));
    localStorage.setItem('lastOnlineTime', Date.now().toString());
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
document.addEventListener('DOMContentLoaded', function() {
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Telegram WebApp
    window.telegramApi.init();
    
    // –ó–∞–≥—Ä—É–∂–∞–µ–º –±–∞–ª–∞–Ω—Å
    if (window.telegramApi.isTelegramUser()) {
        window.telegramApi.loadBalance();
    } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–∑ Telegram, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ª–æ–∫–∞–ª—å–Ω–æ–µ —Ö—Ä–∞–Ω–∏–ª–∏—â–µ
        loadLocalBalance();
    }
    
    const mainSection = document.querySelector('.game-area');
    const savedVibration = localStorage.getItem('vibrationEnabled');
    vibrationEnabled = savedVibration === null ? true : savedVibration === 'true';

    // –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–∞ –¥–ª—è –∏–≥—Ä–æ–≤–æ–π –æ–±–ª–∞—Å—Ç–∏
    if (mainSection) {
        mainSection.addEventListener('click', handleClick);
    }

    // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ñ—Ñ–ª–∞–π–Ω –ø—Ä–æ–≥—Ä–µ—Å—Å
    loadGameState();
    calculateOfflineProgress();
    
    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ—Å—Ç–∞–ª—å–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
    initializeNavigation();
    updateScoreDisplay();
    updateShopItems(); // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –º–∞–≥–∞–∑–∏–Ω–∞
    renderTasks();
    updateStatsSection();

    // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –≥–ª–∞–≤–Ω—É—é —Å—Ç—Ä–∞–Ω–∏—Ü—É
    const homeBtn = document.querySelector('.nav-btn');
    if (homeBtn) {
        homeBtn.click();
    }
    
    loadTimersState();
});

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é getTaskProgress
function getTaskProgress(task) {
    if (!task) return 0;
    
    switch(task.id) {
        case 4:
            return totalClicks >= 1 ? 1 : 0;
        case 5:
            return totalClicks >= 1000 ? 1 : 0;
        case 6:
            return totalClicks >= 10000 ? 1 : 0;
        case 7:
            return totalClicks >= 100000 ? 1 : 0;
        case 8:
            return totalClicks >= 1000000 ? 1 : 0;
        case 9:
            return shopItems.some(item => item.level > 0) ? 1 : 0;
        case 10:
            return shopItems.filter(item => item.level > 0).length >= 5 ? 1 : 0;
        case 11:
            return shopItems.filter(item => item.level > 0).length >= 10 ? 1 : 0;
        case 12:
            return autoClickPower >= 10 ? 1 : 0;
        case 13:
            return autoClickPower >= 100 ? 1 : 0;
        case 14:
            return autoClickPower >= 1000 ? 1 : 0;
        case 15:
            return autoClickPower >= 10000 ? 1 : 0;
        case 21:
            return currentStreak >= 100 ? 1 : 0;
        case 22:
            return currentStreak >= 1000 ? 1 : 0;
        case 23:
            return tg.isSubscribedToChat(task.channel) ? 1 : 0;
        default:
            return 0;
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleClick
function handleClick(e) {
    if (!e || !e.target) return;
    
    const clickCircle = e.target.closest('.click-circle');
    if (!clickCircle) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    totalClicks++;
    score++;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    if (score > maxBalance) {
        maxBalance = score;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫
    totalEarned++;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Ä–∏—é –∫–ª–∏–∫–æ–≤
    const now = Date.now();
    if (now - lastClickTime < 1000) {
        currentStreak++;
    } else {
        currentStreak = 1;
    }
    lastClickTime = now;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–∫–∏ –≤ —á–∞—Å
    const timeSinceStart = (now - gameStartTime) / 1000;
    clicksPerHour = Math.floor(totalClicks * (3600 / timeSinceStart));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updateScoreDisplay();
    updateStatsSection();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏—è
    saveGameState();
    checkTasks();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–ª–∏–∫–∞
function createClickEffect(x, y) {
    const clickEffect = document.createElement('div');
    clickEffect.className = 'click-effect';
    clickEffect.style.left = x + 'px';
    clickEffect.style.top = y + 'px';
    clickEffect.textContent = '+1';
    
    document.body.appendChild(clickEffect);
    
    // –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        clickEffect.remove();
    }, 1000);
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é checkTasksProgress
function checkTasksProgress() {
    tasks.forEach(task => {
        const progress = getTaskProgress(task);
        if (progress >= 1 && !task.completed) {
            task.completed = true;
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            saveGameState();
        }
    });
    renderTasks();
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é loadGameState
function loadGameState() {
    const savedState = localStorage.getItem('gameState');
    if (savedState) {
        const state = JSON.parse(savedState);
        score = state.score || 0;
        autoClickPower = state.autoClickPower || 0;
        totalClicks = state.totalClicks || 0;
        clicksPerHour = state.clicksPerHour || 0;
        currentStreak = state.currentStreak || 0;
        maxBalance = state.maxBalance || 0;
        totalEarned = state.totalEarned || 0;
        gameStartTime = state.gameStartTime || Date.now();
        totalPurchases = state.totalPurchases || 0;

        // Load tasks state
        if (state.tasks) {
            tasks.forEach((task, index) => {
                if (state.tasks[index]) {
                    task.completed = state.tasks[index].completed || false;
                    task.claimed = state.tasks[index].claimed || false;
                }
            });
        }

        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –º–∞–≥–∞–∑–∏–Ω–∞
        if (state.shopItems) {
            state.shopItems.forEach(savedItem => {
                const item = shopItems.find(i => i.id === savedItem.id);
                if (item) {
                    item.level = savedItem.level || 0;
                    item.price = savedItem.price || item.basePrice;
                }
            });
        }
    }
    updateScoreDisplay();
    updateShopItems();
    renderTasks();
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateScoreDisplay
function updateScoreDisplay() {
    if (scoreElement) {
        const displayScore = Math.floor(score || 0);
        scoreElement.innerHTML = `
            <img src="https://i.postimg.cc/mrTkbdNm/coin-us-dollar-40536.png" alt="Coins">
            ${formatNumber(displayScore)}
        `;
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é getTaskProgressText
function getTaskProgressText(task, progress) {
    switch(task.id) {
        case 4:
            return `${progress} / 1`;
        case 5:
            return `${progress} / 1000`;
        case 6:
            return `${progress} / 10000`;
        case 7:
            return `${progress} / 100000`;
        case 8:
            return `${progress} / 1000000`;
        case 9:
            return `${progress} / 1`;
        case 10:
            return `${progress} / 5`;
        case 11:
            return `${progress} / 10`;
        case 12:
            return `${progress} / 10`;
        case 13:
            return `${progress} / 100`;
        case 14:
            return `${progress} / 1000`;
        case 15:
            return `${progress} / 10000`;
        case 21:
            return `${progress} / 100`;
        case 22:
            return `${progress} / 1000`;
        case 23:
            return `${progress} / 1`;
        default:
            return `${progress} / 1`;
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é renderTasks
function renderTasks() {
    const tasksGrid = document.querySelector('.tasks-grid');
    if (!tasksGrid) return;

    // –†–∞–∑–¥–µ–ª—è–µ–º –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏ –Ω–µ–≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ
    const completedTasks = tasks.filter(task => task.completed);
    const uncompletedTasks = tasks.filter(task => !task.completed);

    tasksGrid.innerHTML = `
        <div class="tasks-section">
            <h2 class="tasks-section-title">–ê–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h2>
            ${uncompletedTasks.map(task => {
                const progress = getTaskProgress(task);
                
                return `
                    <div class="task-item">
                        <div class="task-icon">${task.icon}</div>
                        <div class="task-title">${task.title}</div>
                        <div class="task-description">${task.description}</div>
                        <div class="task-reward">–ù–∞–≥—Ä–∞–¥–∞: ${formatNumber(task.reward)} </div>
                        <div class="task-progress-container">
                            <div class="task-progress-bar" style="width: ${progress * 100}%"></div>
                            <div class="task-progress-text">${getTaskProgressText(task, progress)}</div>
                        </div>
                        <button class="task-button claim-task-btn" 
                                data-task-id="${task.id}" 
                                ${progress >= 1 ? '' : 'disabled'}>
                            ${progress >= 1 ? '–ü–æ–ª—É—á–∏—Ç—å' : '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ'}
                        </button>
                    </div>
                `;
            }).join('')}
        </div>
        ${completedTasks.length > 0 ? `
            <div class="tasks-section">
                <h2 class="tasks-section-title">–í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è</h2>
                ${completedTasks.map(task => {
                    return `
                        <div class="task-item completed">
                            <div class="task-icon">${task.icon}</div>
                            <div class="task-title">${task.title}</div>
                            <div class="task-description">${task.description}</div>
                            <div class="task-reward">–ü–æ–ª—É—á–µ–Ω–æ: ${formatNumber(task.reward)} </div>
                            <div class="task-progress-container">
                                <div class="task-progress-bar" style="width: 100%"></div>
                                <div class="task-progress-text">–í—ã–ø–æ–ª–Ω–µ–Ω–æ!</div>
                            </div>
                            <button class="task-button completed" disabled>
                                –í—ã–ø–æ–ª–Ω–µ–Ω–æ
                            </button>
                        </div>
                    `;
                }).join('')}
            </div>
        ` : ''}
    `;
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateStatsSection
function updateStatsSection() {
    const statsSection = document.getElementById('stats-section');
    if (!statsSection) return;

    const clicksPerSecond = autoClickPower;
    const clicksPerHour = clicksPerSecond * 3600;
    const totalTime = Math.floor((Date.now() - gameStartTime) / 1000);
    const hours = Math.floor(totalTime / 3600);
    const minutes = Math.floor((totalTime % 3600) / 60);

    // –ü–æ–ª—É—á–∞–µ–º –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ Telegram WebApp
    const username = tg.initDataUnsafe?.user?.username || '–ò–≥—Ä–æ–∫';

    // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ —Å –∏–º–µ–Ω–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    statsSection.innerHTML = `
        <div class="user-header">
            <h2>üë§ ${username}</h2>
        </div>
        <div class="stats-container">
            <div class="stat-item">
                <div class="stat-emoji">üñ±Ô∏è</div>
                <div class="stat-info">
                    <h3>–í—Å–µ–≥–æ –∫–ª–∏–∫–æ–≤</h3>
                    <p>${formatNumber(totalClicks)}</p>
                </div>
            </div>
            <div class="stat-item">
                <div class="stat-emoji">‚ö°</div>
                <div class="stat-info">
                    <h3>–ö–ª–∏–∫–æ–≤ –≤ —Å–µ–∫—É–Ω–¥—É</h3>
                    <p>${formatNumber(clicksPerSecond)}</p>
                </div>
            </div>
            <div class="stat-item">
                <div class="stat-emoji">üöÄ</div>
                <div class="stat-info">
                    <h3>–ö–ª–∏–∫–æ–≤ –≤ —á–∞—Å</h3>
                    <p>${formatNumber(clicksPerHour)}</p>
                </div>
            </div>
            <div class="stat-item">
                <div class="stat-emoji">‚è∞</div>
                <div class="stat-info">
                    <h3>–í—Ä–µ–º—è –≤ –∏–≥—Ä–µ</h3>
                    <p>${hours}—á ${minutes}–º</p>
                </div>
            </div>
            <div class="stat-item">
                <div class="stat-emoji">üí∞</div>
                <div class="stat-info">
                    <h3>–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å</h3>
                    <p>${formatNumber(Math.max(score, maxBalance))}</p>
                </div>
            </div>
        </div>
    `;
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    const now = Date.now();
    const deltaTime = 10; // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ 10 —Å–µ–∫—É–Ω–¥
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –æ—Ç –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
    if (autoClickPower > 0) {
        score += autoClickPower * deltaTime;
        totalEarned += autoClickPower * deltaTime;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –æ—Ç –∞–≤—Ç–æ–¥–æ—Ö–æ–¥–∞
    const autoIncome = calculateAutoIncomePerSecond() * deltaTime;
    if (autoIncome > 0) {
        score += autoIncome;
        totalEarned += autoIncome;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    if (score > maxBalance) {
        maxBalance = score;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updateScoreDisplay();
    updateStatsSection();
    updateShopItems();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    saveGameState();
    lastSaveTime = now;
    lastUpdateTime = now;
}, 10000);

function canClaimTask(task) {
    switch(task.id) {
        case 4:
            return totalClicks >= 1;
        case 5:
            return totalClicks >= 1000;
        case 6:
            return totalClicks >= 10000;
        case 7:
            return totalClicks >= 100000;
        case 8:
            return totalClicks >= 1000000;
        case 9:
            return shopItems.some(item => item.level > 0);
        case 10:
            return shopItems.filter(item => item.level > 0).length >= 5;
        case 11:
            return shopItems.filter(item => item.level > 0).length >= 10;
        case 12:
            return autoClickPower >= 10;
        case 13:
            return autoClickPower >= 100;
        case 14:
            return autoClickPower >= 1000;
        case 15:
            return autoClickPower >= 10000;
        case 21:
            return currentStreak >= 100;
        case 22:
            return currentStreak >= 1000;
        case 23:
            return tg.isSubscribedToChat(task.channel);
        default:
            return false;
    }
}

function canAfford(price) {
    return score >= price;
}

// –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–≥—Ä—ã
let shopItems = [
    {
        id: 'energy-upgrade',
        icon: `<img src="https://i.postimg.cc/SKJxmrmN/image.png" alt="–£–ª—É—á—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏">`,
        title: '–£–ª—É—á—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏',
        price: 1000,
        basePrice: 1000,
        level: 0,
        power: 0,
        description: '–£–≤–µ–ª–∏—á–∏–≤–∞–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –∑–∞–ø–∞—Å —ç–Ω–µ—Ä–≥–∏–∏ –Ω–∞ 100'
    },
    {
        id: 1,
        icon: `<img src="https://i.postimg.cc/44zLpwFY/image.png" alt="–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä">`,
        title: '–ê–≤—Ç–æ–∫–ª–∏–∫–µ—Ä',
        price: 500,
        basePrice: 500,
        level: 0,
        power: 1,
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç 1 –∫–ª–∏–∫/—Å–µ–∫'
    },
    {
        id: 2,
        icon: `<img src="https://i.postimg.cc/1znsJbL0/image.png" alt="–†–æ–±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫">`,
        title: '–†–æ–±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫',
        price: 1000,
        basePrice: 1000,
        level: 0,
        power: 2,
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç 2 –∫–ª–∏–∫–∞/—Å–µ–∫'
    },
    {
        id: 3,
        icon: `<img src="https://i.postimg.cc/KcLt8XP6/free-icon-business-12761812.png" alt="–ú–∏–Ω–∏-—Ñ–∞–±—Ä–∏–∫–∞">`,
        title: '–ú–∏–Ω–∏-—Ñ–∞–±—Ä–∏–∫–∞',
        price: 2000,
        basePrice: 2000,
        level: 0,
        power: 5,
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç 5 –∫–ª–∏–∫–æ–≤/—Å–µ–∫'
    },
    {
        id: 4,
        icon: `<img src="https://i.postimg.cc/xTXDzRCV/free-icon-medical-laboratory-2971555.png" alt="–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è">`,
        title: '–õ–∞–±–æ—Ä–∞—Ç–æ—Ä–∏—è',
        price: 5000,
        basePrice: 5000,
        level: 0,
        power: 10,
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç 10 –∫–ª–∏–∫–æ–≤/—Å–µ–∫'
    },
    {
        id: 5,
        icon: `<img src="https://i.postimg.cc/pVsMydD7/free-icon-factories-273152.png" alt="–ó–∞–≤–æ–¥">`,
        title: '–ó–∞–≤–æ–¥',
        price: 10000,
        basePrice: 10000,
        level: 0,
        power: 20,
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç 20 –∫–ª–∏–∫–æ–≤/—Å–µ–∫'
    },
    {
        id: 6,
        icon: `<img src="https://i.postimg.cc/2SdHbb4f/free-icon-robot-assistant-12003464.png" alt="–°–µ—Ç—å —Ä–æ–±–æ—Ç–æ–≤">`,
        title: '–°–µ—Ç—å —Ä–æ–±–æ—Ç–æ–≤',
        price: 20000,
        basePrice: 20000,
        level: 0,
        power: 50,
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç 50 –∫–ª–∏–∫–æ–≤/—Å–µ–∫'
    },
    {
        id: 7,
        icon: `<img src="https://i.postimg.cc/Hs8WgHbM/free-icon-artificial-intelligence-2104411.png" alt="–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç">`,
        title: '–ò—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω—ã–π –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç',
        price: 50000,
        basePrice: 50000,
        level: 0,
        power: 100,
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç 100 –∫–ª–∏–∫–æ–≤/—Å–µ–∫'
    },
    {
        id: 8,
        icon: `<img src="https://i.postimg.cc/QxC9KR1N/free-icon-satellite-2536704.png" alt="–°–ø—É—Ç–Ω–∏–∫">`,
        title: '–°–ø—É—Ç–Ω–∏–∫',
        price: 100000,
        basePrice: 100000,
        level: 0,
        power: 200,
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç 200 –∫–ª–∏–∫–æ–≤/—Å–µ–∫'
    },
    {
        id: 9,
        icon: `<img src="https://i.postimg.cc/GtQf04qR/free-icon-base-6257298.png" alt="–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è">`,
        title: '–ö–æ—Å–º–∏—á–µ—Å–∫–∞—è —Å—Ç–∞–Ω—Ü–∏—è',
        price: 200000,
        basePrice: 200000,
        level: 0,
        power: 500,
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç 500 –∫–ª–∏–∫–æ–≤/—Å–µ–∫'
    },
    {
        id: 10,
        icon: `<img src="https://i.postimg.cc/KcLt8XP6/free-icon-quantum-computer-6554108.png" alt="–ö–≤–∞–Ω—Ç–æ–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä">`,
        title: '–ö–≤–∞–Ω—Ç–æ–≤—ã–π –∫–æ–º–ø—å—é—Ç–µ—Ä',
        price: 500000,
        basePrice: 500000,
        level: 0,
        power: 1000,
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç 1000 –∫–ª–∏–∫–æ–≤/—Å–µ–∫'
    },
    {
        id: 11,
        icon: `<img src="https://i.postimg.cc/xCQnGbZy/free-icon-time-machine-6642136.png" alt="–ú–∞—à–∏–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏">`,
        title: '–ú–∞—à–∏–Ω–∞ –≤—Ä–µ–º–µ–Ω–∏',
        price: 1000000,
        basePrice: 1000000,
        level: 0,
        power: 2000,
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç 2000 –∫–ª–∏–∫–æ–≤/—Å–µ–∫'
    },
    {
        id: 12,
        icon: `<img src="https://i.postimg.cc/pVsMydD7/free-icon-teleport-1636923.png" alt="–¢–µ–ª–µ–ø–æ—Ä—Ç">`,
        title: '–¢–µ–ª–µ–ø–æ—Ä—Ç',
        price: 2000000,
        basePrice: 2000000,
        level: 0,
        power: 5000,
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç 5000 –∫–ª–∏–∫–æ–≤/—Å–µ–∫'
    },
    {
        id: 13,
        icon: `<img src="https://i.postimg.cc/Hs8WgHbM/free-icon-cloning-8595286.png" alt="–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ">`,
        title: '–ö–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ',
        price: 5000000,
        basePrice: 5000000,
        level: 0,
        power: 10000,
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç 10000 –∫–ª–∏–∫–æ–≤/—Å–µ–∫'
    },
    {
        id: 14,
        icon: `<img src="https://i.postimg.cc/vm5cdnxC/free-icon-virtual-7009709.png" alt="–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å">`,
        title: '–í–∏—Ä—Ç—É–∞–ª—å–Ω–∞—è —Ä–µ–∞–ª—å–Ω–æ—Å—Ç—å',
        price: 10000000,
        basePrice: 10000000,
        level: 0,
        power: 20000,
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç 20000 –∫–ª–∏–∫–æ–≤/—Å–µ–∫'
    },
    {
        id: 15,
        icon: `<img src="https://i.postimg.cc/VsCHPLKn/free-icon-hologram-1387354.png" alt="–ì–æ–ª–æ–≥—Ä–∞–º–º–∞">`,
        title: '–ì–æ–ª–æ–≥—Ä–∞–º–º–∞',
        price: 20000000,
        basePrice: 20000000,
        level: 0,
        power: 50000,
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç 50000 –∫–ª–∏–∫–æ–≤/—Å–µ–∫'
    },
    {
        id: 16,
        icon: `<img src="https://i.postimg.cc/ZRkp8Z6z/free-icon-robot-4136152.png" alt="–ê—Ä–º–∏—è —Ä–æ–±–æ—Ç–æ–≤">`,
        title: '–ê—Ä–º–∏—è —Ä–æ–±–æ—Ç–æ–≤',
        price: 50000000,
        basePrice: 50000000,
        level: 0,
        power: 100000,
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç 100000 –∫–ª–∏–∫–æ–≤/—Å–µ–∫'
    },
    {
        id: 17,
        icon: `<img src="https://i.postimg.cc/sfGDF7Fm/free-icon-moon-2949268.png" alt="–ö–æ–ª–æ–Ω–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–µ—Ç">`,
        title: '–ö–æ–ª–æ–Ω–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–µ—Ç',
        price: 100000000,
        basePrice: 100000000,
        level: 0,
        power: 200000,
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç 200000 –∫–ª–∏–∫–æ–≤/—Å–µ–∫'
    },
    {
        id: 18,
        icon: `<img src="https://i.postimg.cc/RVmGr16x/free-icon-galactic-empire-10659391.png" alt="–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∏–º–ø–µ—Ä–∏—è">`,
        title: '–ì–∞–ª–∞–∫—Ç–∏—á–µ—Å–∫–∞—è –∏–º–ø–µ—Ä–∏—è',
        price: 200000000,
        basePrice: 200000000,
        level: 0,
        power: 500000,
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç 500000 –∫–ª–∏–∫–æ–≤/—Å–µ–∫'
    },
    {
        id: 19,
        icon: `<img src="https://i.postimg.cc/RVmGr16x/free-icon-multiverse-10659390.png" alt="–ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Å–µ–ª–µ–Ω–Ω–æ–π">`,
        title: '–ö–æ–Ω—Ç—Ä–æ–ª—å –≤—Å–µ–ª–µ–Ω–Ω–æ–π',
        price: 500000000,
        basePrice: 500000000,
        level: 0,
        power: 1000000,
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç 1000000 –∫–ª–∏–∫–æ–≤/—Å–µ–∫'
    },
    {
        id: 20,
        icon: `<img src="https://i.postimg.cc/RVmGr16x/free-icon-multiverse-10659390.png" alt="–ú—É–ª—å—Ç–∏–≤—Å–µ–ª–µ–Ω–Ω–∞—è">`,
        title: '–ú—É–ª—å—Ç–∏–≤—Å–µ–ª–µ–Ω–Ω–∞—è',
        price: 1000000000,
        basePrice: 1000000000,
        level: 0,
        power: 2000000,
        description: '–î–æ–±–∞–≤–ª—è–µ—Ç 2000000 –∫–ª–∏–∫–æ–≤/—Å–µ–∫'
    }
];

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
document.querySelectorAll('.nav-btn').forEach((btn, index) => {
    btn.addEventListener('click', () => {
        document.querySelectorAll('.nav-btn').forEach(b => b.classList.remove('active'));
        btn.classList.add('active');
        
        // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
        document.querySelectorAll('.section-content').forEach(section => {
            section.style.display = 'none';
        });

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–Ω–æ–ø–∫–∏
        switch(index) {
            case 0: // –ì–ª–∞–≤–Ω–∞—è
                document.getElementById('changelogBtn').style.display = 'block';
                break;
            case 1: // –ú–∞–≥–∞–∑–∏–Ω
                document.getElementById('shop-section').style.display = 'block';
                document.getElementById('changelogBtn').style.display = 'none';
                updateShopItems();
                break;
            case 2: // –ù–∞–≥—Ä–∞–¥—ã
                document.getElementById('development-section').style.display = 'block';
                document.getElementById('changelogBtn').style.display = 'none';
                break;
            case 3: // –ó–∞–¥–∞–Ω–∏—è
                document.getElementById('tasks-section').style.display = 'block';
                document.getElementById('changelogBtn').style.display = 'none';
                renderTasks();
                break;
            case 4: // –ú–∏–Ω–∏ –∏–≥—Ä—ã
                document.getElementById('mini-games-section').style.display = 'block';
                document.getElementById('changelogBtn').style.display = 'none';
                break;
            case 5: // –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
                document.getElementById('development-section').style.display = 'block';
                document.getElementById('changelogBtn').style.display = 'none';
                break;
            case 6: // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                document.getElementById('settings-section').style.display = 'block';
                document.getElementById('changelogBtn').style.display = 'none';
                break;
            case 7: // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                document.getElementById('stats-section').style.display = 'block';
                document.getElementById('changelogBtn').style.display = 'none';
                updateStatsSection();
                break;
        }
    });
});

function updateScore() {
    const scoreElement = document.querySelector('.score');
    if (scoreElement) {
        scoreElement.textContent = formatNumber(score);
    }
}

function formatNumber(num) {
    if (num >= 1e6) {
        return (num / 1e6).toFixed(1) + 'M';
    } else if (num >= 1e3) {
        return (num / 1e3).toFixed(1) + 'K';
    }
    return num.toString();
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–¥—Å—á–µ—Ç–∞ –¥–æ—Ö–æ–¥–∞ –≤ —Å–µ–∫—É–Ω–¥—É
function calculateAutoIncomePerSecond() {
    let totalIncome = 0;
    // –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º –¥–æ—Ö–æ–¥ –æ—Ç –≤—Å–µ—Ö –∫—É–ø–ª–µ–Ω–Ω—ã—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤
    shopItems.forEach(item => {
        if (item.count > 0) {
            totalIncome += item.income * item.count;
        }
    });
    return totalIncome;
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É –∫–∞–∂–¥—ã–µ N —Å–µ–∫—É–Ω–¥
setInterval(() => {
    const now = Date.now();
    const deltaTime = gameSettings.autoIncomeInterval;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –æ—Ç –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞ —Å —É—á–µ—Ç–æ–º –º–Ω–æ–∂–∏—Ç–µ–ª—è
    if (autoClickPower > 0) {
        const autoClickIncome = autoClickPower * deltaTime * gameSettings.autoClickMultiplier;
        score += autoClickIncome;
        totalEarned += autoClickIncome;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –æ—Ç –∞–≤—Ç–æ–¥–æ—Ö–æ–¥–∞
    const autoIncome = calculateAutoIncomePerSecond() * deltaTime;
    if (autoIncome > 0) {
        score += autoIncome;
        totalEarned += autoIncome;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    if (score > maxBalance) {
        maxBalance = score;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updateScoreDisplay();
    updateStatsSection();
    updateShopItems();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    if (now - lastSaveTime >= gameSettings.saveInterval * 1000) {
        saveGameState();
        lastSaveTime = now;
    }
    
    lastUpdateTime = now;
}, gameSettings.autoIncomeInterval * 1000);

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleClick
function handleClick(e) {
    if (!canClick) return;
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ —Å —É—á–µ—Ç–æ–º —Å–∏–ª—ã –∫–ª–∏–∫–∞
    score += gameSettings.clickPower;
    totalClicks++;
    totalEarned += gameSettings.clickPower;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    const now = Date.now();
    clickTimes.push(now);
    
    // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –∫–ª–∏–∫–∏ (—Å—Ç–∞—Ä—à–µ 1 —Å–µ–∫—É–Ω–¥—ã)
    while (clickTimes.length > 0 && now - clickTimes[0] > 1000) {
        clickTimes.shift();
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º CPS
    clicksPerSecond = clickTimes.length;
    clicksPerHour = Math.floor(clicksPerSecond * 3600);
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updateScoreDisplay();
    updateStatsSection();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏—è
    saveGameState();
    checkTasks();
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é buyItem
function buyItem(itemId) {
    const item = shopItems.find(item => item.id === itemId);
    if (!item) return;

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –∞–∫—Ç–∏–≤–Ω—ã–π —Ç–∞–π–º–µ—Ä –¥–ª—è —ç—Ç–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
    const timer = itemTimers[itemId];
    if (timer) {
        // –î–ª—è –≤—Å–µ—Ö –ø—Ä–µ–¥–º–µ—Ç–æ–≤ –Ω—É–∂–Ω–æ –∂–¥–∞—Ç—å –æ–∫–æ–Ω—á–∞–Ω–∏—è —Ç–∞–π–º–µ—Ä–∞
        if (timer.endTime - Date.now() > 1000) {
            showNotification('–ü–æ–¥–æ–∂–¥–∏—Ç–µ, –ø–æ–∫–∞ –∑–∞–∫–æ–Ω—á–∏—Ç—Å—è —Ç–∞–π–º–µ—Ä!');
            return;
        }
    }

    if (score >= item.price) {
        score -= item.price;
        item.level++;
        totalPurchases++;
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É –ø—Ä–µ–¥–º–µ—Ç–∞
        item.price = Math.floor(item.basePrice * Math.pow(1.15, item.level));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–æ—Ö–æ–¥
        autoClickPower = shopItems.reduce((total, item) => {
            return total + (item.power * (item.level || 0));
        }, 0);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        updateScoreDisplay();
        updateShopItems();
        updateStatsSection();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        saveGameState();
        checkTasks();
        
        // –û–±—Ä–∞–±–æ—Ç–∫–∞ –ø–æ–∫—É–ø–∫–∏
        handlePurchase(itemId);
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
    }
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –ø–æ –∫–Ω–æ–ø–∫–∞–º –ø–æ–∫—É–ø–∫–∏
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('buy-button')) {
        const itemId = parseInt(e.target.closest('.shop-item').getAttribute('data-item-id'));
        if (!isNaN(itemId)) {
            buyItem(itemId);
        }
    }
});

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é updateShopItems
function updateShopItems() {
    const shopSection = document.getElementById('shop-section');
    if (!shopSection) return;
    
    shopSection.innerHTML = `<div class="shop-window">` + 
        shopItems.map((item) => `
            <div class="shop-item" data-item-id="${item.id}" id="item-${item.id}">
                <div class="item-icon">
                    ${item.icon}
                </div>
                <div class="item-info">
                    <h3 class="item-title">${item.title}</h3>
                    <div class="item-level">–£—Ä. ${item.level || 0}</div>
                </div>
                <div class="item-right">
                    <div class="item-profit">+${formatNumber(item.power || 0)} –≤ —Å–µ–∫</div>
                    <button class="buy-button" ${canAfford(item.price) ? '' : 'disabled'}>
                        <span class="coin-icon"></span>
                        ${formatNumber(item.price)}
                    </button>
                </div>
            </div>
        `).join('') + `</div>`;
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ changelog
const changelogBtn = document.getElementById('changelogBtn');
if (changelogBtn) {
    changelogBtn.addEventListener('click', () => {
        showChangelog(); // –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ changelog.js
    });
}

// Changelog Modal functionality
const changelogModal = document.getElementById('changelogModal');
const closeBtn = document.querySelector('.close-btn');

if (closeBtn) {
    closeBtn.addEventListener('click', () => {
        changelogModal.style.display = 'none';
    });
}

window.addEventListener('click', (e) => {
    if (e.target === changelogModal) {
        changelogModal.style.display = 'none';
    }
});

document.getElementById('vibrationToggle').addEventListener('change', function() {
    vibrationEnabled = this.checked;
    localStorage.setItem('vibrationEnabled', vibrationEnabled);
    showNotification(`–í–∏–±—Ä–∞—Ü–∏—è ${vibrationEnabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
});

document.body.addEventListener('change', function(e) {
    if (e.target.id === 'vibrationToggle') {
        vibrationEnabled = e.target.checked;
        localStorage.setItem('vibrationEnabled', vibrationEnabled);
        showNotification(`–í–∏–±—Ä–∞—Ü–∏—è ${vibrationEnabled ? '–≤–∫–ª—é—á–µ–Ω–∞' : '–≤—ã–∫–ª—é—á–µ–Ω–∞'}`);
        
        if (vibrationEnabled) {
            try {
                window.navigator.vibrate(15);
            } catch (e) {
                console.log('Vibration test failed:', e);
            }
        }
    }
});

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é checkTasks
function checkTasks() {
    tasks.forEach(task => {
        if (!task.completed) {
            let completed = false;
            
            switch(task.id) {
                case 4: // –ü–µ—Ä–≤—ã–µ —à–∞–≥–∏
                    completed = clickCount >= 1;
                    break;
                case 5: // –ù–∞—á–∏–Ω–∞—é—â–∏–π –∫–ª–∏–∫–µ—Ä
                    completed = score >= 1000;
                    break;
                case 6: // –û–ø—ã—Ç–Ω—ã–π –∫–ª–∏–∫–µ—Ä
                    completed = score >= 10000;
                    break;
                case 7: // –ú–∞—Å—Ç–µ—Ä –∫–ª–∏–∫–µ—Ä
                    completed = score >= 100000;
                    break;
                case 8: // –ö–æ—Ä–æ–ª—å –∫–ª–∏–∫–æ–≤
                    completed = score >= 1000000;
                    break;
                case 9: // –ü–µ—Ä–≤–∞—è –ø–æ–∫—É–ø–∫–∞
                    completed = shopItems.some(item => item.level > 0);
                    break;
                case 10: // –®–æ–ø–æ–≥–æ–ª–∏–∫
                    completed = shopItems.filter(item => item.level > 0).length >= 5;
                    break;
                case 11: // –ö–æ–ª–ª–µ–∫—Ü–∏–æ–Ω–µ—Ä
                    completed = shopItems.filter(item => item.level > 0).length >= 10;
                    break;
                case 12: // –≠–Ω–µ—Ä–≥–∏—á–Ω—ã–π —Å—Ç–∞—Ä—Ç
                    completed = autoClickPower >= 10;
                    break;
                case 13: // –°–∫–æ—Ä–æ—Å—Ç–Ω–æ–π –∫–ª–∏–∫–µ—Ä
                    completed = autoClickPower >= 100;
                    break;
                case 14: // –ó–≤–µ–∑–¥–Ω—ã–π –ø—É—Ç—å
                    completed = autoClickPower >= 1000;
                    break;
                case 15: // –ú–∏—Ä–æ–≤–æ–µ –≥–æ—Å–ø–æ–¥—Å—Ç–≤–æ
                    completed = autoClickPower >= 10000;
                    break;
                case 21: // –¢–æ—á–Ω–æ—Å—Ç—å
                    completed = currentStreak >= 100;
                    break;
                case 22: // –¶–∏—Ä–∫–æ–≤–æ–π –∞—Ä—Ç–∏—Å—Ç
                    completed = currentStreak >= 1000;
                    break;
                case 23: // –ü–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ Telegram –∫–∞–Ω–∞–ª
                    completed = tg.isSubscribedToChat(task.channel);
                    break;
                // –î–æ–±–∞–≤—å—Ç–µ –¥—Ä—É–≥–∏–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
            }

            if (completed) {
                task.completed = true;
                // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
                saveGameState();
            }
        }
    });
    
    renderTasks(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
}

// –§—É–Ω–∫—Ü–∏—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã –∑–∞ –∑–∞–¥–∞–Ω–∏–µ
function claimTaskReward(taskId) {
    const task = tasks.find(t => t.id === taskId);
    if (task && task.completed && !task.claimed) {
        score += task.reward;
        task.claimed = true;
        updateScoreDisplay();
        saveGameState();
        showNotification(`–ü–æ–ª—É—á–µ–Ω–∞ –Ω–∞–≥—Ä–∞–¥–∞: ${formatNumber(task.reward)} –∫–ª–∏–∫–æ–≤!`);
        renderTasks(); // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é renderTasks
function renderTasks() {
    const tasksSection = document.getElementById('tasks-section');
    if (!tasksSection) return;

    tasksSection.innerHTML = tasks.map(task => `
        <div class="task-item ${task.completed ? 'completed' : ''} ${task.claimed ? 'claimed' : ''}" data-task-id="${task.id}">
            <div class="task-icon">${task.icon}</div>
            <div class="task-info">
                <h3 class="task-title">${task.title}</h3>
                <div class="task-description">${task.description}</div>
                <div class="task-reward">–ù–∞–≥—Ä–∞–¥–∞: ${formatNumber(task.reward)} –∫–ª–∏–∫–æ–≤</div>
            </div>
            <button class="claim-button" onclick="claimTaskReward(${task.id})" 
                ${task.completed && !task.claimed ? '' : 'disabled'}>
                ${task.claimed ? '–ü–æ–ª—É—á–µ–Ω–æ' : (task.completed ? '–ó–∞–±—Ä–∞—Ç—å –Ω–∞–≥—Ä–∞–¥—É' : '–ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ')}
            </button>
        </div>
    `).join('');
}

// –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('load', loadTimersState);

// –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–¥ –∑–∞–∫—Ä—ã—Ç–∏–µ–º —Å—Ç—Ä–∞–Ω–∏—Ü—ã
window.addEventListener('beforeunload', () => {
    saveTimersState();
});

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–Ω–æ–≤–ª—è–µ–º —Ç–∞–π–º–µ—Ä—ã –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É
setInterval(() => {
    Object.keys(itemTimers).forEach(itemId => {
        const timer = itemTimers[itemId];
        if (timer && timer.endTime <= Date.now()) {
            const buyButton = document.querySelector(`#item-${itemId} .buy-button`);
            if (buyButton) {
                const formattedPrice = formatNumber(timer.price);
                buyButton.innerHTML = formattedPrice;
                buyButton.disabled = false;
                buyButton.style.opacity = '1';
            }
            stopTimer(itemId);
        }
    });
    saveTimersState();
}, 1000);

// –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–ª–∏–∫–æ–≤ –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
document.addEventListener('click', function(e) {
    if (e.target.classList.contains('task-button')) {
        const taskId = parseInt(e.target.closest('.task-item').getAttribute('data-task-id'));
        const task = tasks.find(t => t.id === taskId);
        
        if (task && task.type === 'telegram_subscription') {
            window.telegramApi.handleSubscriptionCheck(taskId);
        } else {
            claimTaskReward(taskId);
        }
    }
});

// –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ
document.addEventListener('DOMContentLoaded', () => {
    // –ñ–¥–µ–º –∑–∞–≥—Ä—É–∑–∫–∏ –≤—Å–µ—Ö —Å–∫—Ä–∏–ø—Ç–æ–≤
    setTimeout(() => {
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –µ—Å–ª–∏ —Ñ—É–Ω–∫—Ü–∏—è –¥–æ—Å—Ç—É–ø–Ω–∞
        if (typeof window.loadGameSettings === 'function') {
            window.loadGameSettings();
        }
        
        // –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω—Ç–µ—Ä–≤–∞–ª —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
        startGameInterval();
        
        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –Ω–∞–≤–∏–≥–∞—Ü–∏—é
        initializeNavigation();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
        loadGameState();
    }, 100);
});

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ gameSettings.js
window.startGameInterval = startGameInterval;

// –§—É–Ω–∫—Ü–∏—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏
function initializeNavigation() {
    document.querySelectorAll('.nav-btn').forEach((btn, index) => {
        btn.addEventListener('click', () => {
            document.querySelectorAll('.nav-btn').forEach(b => b.classList.remove('active'));
            btn.classList.add('active');
            
            // –°–∫—Ä—ã–≤–∞–µ–º –≤—Å–µ —Å–µ–∫—Ü–∏–∏
            document.querySelectorAll('.section-content').forEach(section => {
                section.style.display = 'none';
            });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω—É–∂–Ω—É—é —Å–µ–∫—Ü–∏—é –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –∫–Ω–æ–ø–∫–∏
            switch(index) {
                case 0: // –ì–ª–∞–≤–Ω–∞—è
                    document.getElementById('changelogBtn').style.display = 'block';
                    break;
                case 1: // –ú–∞–≥–∞–∑–∏–Ω
                    document.getElementById('shop-section').style.display = 'block';
                    document.getElementById('changelogBtn').style.display = 'none';
                    updateShopItems();
                    break;
                case 2: // –ù–∞–≥—Ä–∞–¥—ã
                    document.getElementById('development-section').style.display = 'block';
                    document.getElementById('changelogBtn').style.display = 'none';
                    break;
                case 3: // –ó–∞–¥–∞–Ω–∏—è
                    document.getElementById('tasks-section').style.display = 'block';
                    document.getElementById('changelogBtn').style.display = 'none';
                    renderTasks();
                    break;
                case 4: // –ú–∏–Ω–∏ –∏–≥—Ä—ã
                    document.getElementById('mini-games-section').style.display = 'block';
                    document.getElementById('changelogBtn').style.display = 'none';
                    break;
                case 5: // –ò–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏
                    document.getElementById('development-section').style.display = 'block';
                    document.getElementById('changelogBtn').style.display = 'none';
                    break;
                case 6: // –ù–∞—Å—Ç—Ä–æ–π–∫–∏
                    document.getElementById('settings-section').style.display = 'block';
                    document.getElementById('changelogBtn').style.display = 'none';
                    break;
                case 7: // –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    document.getElementById('stats-section').style.display = 'block';
                    document.getElementById('changelogBtn').style.display = 'none';
                    updateStatsSection();
                    break;
            }
        });
    });
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ gameSettings.js
window.initializeNavigation = initializeNavigation;

// –§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –±–∞–ª–∞–Ω—Å–∞
function saveBalance() {
    if (window.telegramApi.isTelegramUser()) {
        window.telegramApi.saveBalance();
    } else {
        // –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∏–∑ Telegram, —Å–æ—Ö—Ä–∞–Ω—è–µ–º –ª–æ–∫–∞–ª—å–Ω–æ
        localStorage.setItem('userBalance', score.toString());
    }
}

// –§—É–Ω–∫—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
function loadLocalBalance() {
    const savedBalance = localStorage.getItem('userBalance');
    if (savedBalance) {
        score = parseInt(savedBalance);
        updateBalanceDisplay();
    }
}

let gameInterval;

function startGameInterval() {
    if (gameInterval) {
        clearInterval(gameInterval);
    }
    
    gameInterval = setInterval(() => {
        const now = Date.now();
        const deltaTime = 10; // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ 10 —Å–µ–∫—É–Ω–¥
        
        // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –æ—Ç –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
        if (autoClickPower > 0) {
            score += autoClickPower * deltaTime;
            totalEarned += autoClickPower * deltaTime;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –æ—Ç –∞–≤—Ç–æ–¥–æ—Ö–æ–¥–∞
        const autoIncome = calculateAutoIncomePerSecond() * deltaTime;
        if (autoIncome > 0) {
            score += autoIncome;
            totalEarned += autoIncome;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
        if (score > maxBalance) {
            maxBalance = score;
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        updateScoreDisplay();
        updateStatsSection();
        updateShopItems();
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
        saveGameState();
        lastSaveTime = now;
        lastUpdateTime = now;
    }, 10000);
}

function restartGameIntervals() {
    startGameInterval();
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é handleClick
function handleClick(e) {
    if (!canClick) return;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫–∏
    totalClicks++;
    score++;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    if (score > maxBalance) {
        maxBalance = score;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ–±—â–∏–π –∑–∞—Ä–∞–±–æ—Ç–æ–∫
    totalEarned++;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é —Å–µ—Ä–∏—é –∫–ª–∏–∫–æ–≤
    const now = Date.now();
    if (now - lastClickTime < 1000) {
        currentStreak++;
    } else {
        currentStreak = 1;
    }
    lastClickTime = now;
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –∫–ª–∏–∫–∏ –≤ —á–∞—Å
    const timeSinceStart = (now - gameStartTime) / 1000;
    clicksPerHour = Math.floor(totalClicks * (3600 / timeSinceStart));
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updateScoreDisplay();
    updateStatsSection();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–∞–Ω–∏—è
    saveGameState();
    checkTasks();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —ç—Ñ—Ñ–µ–∫—Ç–∞ –∫–ª–∏–∫–∞
function createClickEffect(x, y) {
    const clickEffect = document.createElement('div');
    clickEffect.className = 'click-effect';
    clickEffect.style.left = x + 'px';
    clickEffect.style.top = y + 'px';
    clickEffect.textContent = '+1';
    
    document.body.appendChild(clickEffect);
    
    // –£–¥–∞–ª—è–µ–º —ç—Ñ—Ñ–µ–∫—Ç –ø–æ—Å–ª–µ –∞–Ω–∏–º–∞—Ü–∏–∏
    setTimeout(() => {
        clickEffect.remove();
    }, 1000);
}

function canClaimTask(task) {
    switch(task.id) {
        case 4:
            return totalClicks >= 1;
        case 5:
            return totalClicks >= 1000;
        case 6:
            return totalClicks >= 10000;
        case 7:
            return totalClicks >= 100000;
        case 8:
            return totalClicks >= 1000000;
        case 9:
            return shopItems.some(item => item.level > 0);
        case 10:
            return shopItems.filter(item => item.level > 0).length >= 5;
        case 11:
            return shopItems.filter(item => item.level > 0).length >= 10;
        case 12:
            return autoClickPower >= 10;
        case 13:
            return autoClickPower >= 100;
        case 14:
            return autoClickPower >= 1000;
        case 15:
            return autoClickPower >= 10000;
        case 21:
            return currentStreak >= 100;
        case 22:
            return currentStreak >= 1000;
        case 23:
            return tg.isSubscribedToChat(task.channel);
        default:
            return false;
    }
}

// –û–±–Ω–æ–≤–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é checkTasksProgress
function checkTasksProgress() {
    tasks.forEach(task => {
        const progress = getTaskProgress(task);
        if (progress >= 1 && !task.completed) {
            task.completed = true;
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä—ã
            saveGameState();
        }
    });
    renderTasks();
}

// –û–±–Ω–æ–≤–ª—è–µ–º –∏–≥—Ä—É –∫–∞–∂–¥—ã–µ 10 —Å–µ–∫—É–Ω–¥
setInterval(() => {
    const now = Date.now();
    const deltaTime = 10; // —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –≤ 10 —Å–µ–∫—É–Ω–¥
    
    // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –æ—Ç –∞–≤—Ç–æ–∫–ª–∏–∫–µ—Ä–∞
    if (autoClickPower > 0) {
        score += autoClickPower * deltaTime;
        totalEarned += autoClickPower * deltaTime;
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –æ—á–∫–∏ –æ—Ç –∞–≤—Ç–æ–¥–æ—Ö–æ–¥–∞
    const autoIncome = calculateAutoIncomePerSecond() * deltaTime;
    if (autoIncome > 0) {
        score += autoIncome;
        totalEarned += autoIncome;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –º–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å
    if (score > maxBalance) {
        maxBalance = score;
    }
    
    // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
    updateScoreDisplay();
    updateStatsSection();
    updateShopItems();
    
    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    saveGameState();
    lastSaveTime = now;
    lastUpdateTime = now;
}, 10000);

function buyItem(itemId) {
    const item = shopItems.find(item => item.id === itemId);
    if (!item) return;

    if (score >= item.price) {
        score -= item.price;
        item.level++;
        
        // –°–ø–µ—Ü–∏–∞–ª—å–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏
        if (itemId === 'energy-upgrade') {
            maxEnergy += 100;
            currentEnergy = maxEnergy;
            localStorage.setItem('maxEnergy', maxEnergy);
            updateEnergyDisplay();
        }
        
        // –û–±–Ω–æ–≤–ª—è–µ–º —Ü–µ–Ω—É
        item.price = Math.floor(item.basePrice * Math.pow(1.15, item.level));
        
        // –û–±–Ω–æ–≤–ª—è–µ–º –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ
        updateBalanceDisplay();
        updateShopItem(item);
        saveGameState();
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø–æ–∫—É–ø–∫–µ
        showNotification(`–ö—É–ø–ª–µ–Ω–æ: ${item.title}`);
        
        // –û–±–Ω–æ–≤–ª—è–µ–º CPS –µ—Å–ª–∏ —ç—Ç–æ –Ω–µ —É–ª—É—á—à–µ–Ω–∏–µ —ç–Ω–µ—Ä–≥–∏–∏
        if (itemId !== 'energy-upgrade') {
            updateCPS();
        }
    } else {
        showNotification('–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —Å—Ä–µ–¥—Å—Ç–≤!');
    }
}